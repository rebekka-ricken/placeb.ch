/**
 * angular2-google-maps - Angular2 components for Google Maps
 * @version v0.6.1
 * @link https://github.com/SebastianM/angular2-google-maps#readme
 * @license MIT
 */
{"version":3,"sources":["services/maps-api-loader/lazy-maps-api-loader.ts"],"names":["GoogleMapsScriptProtocol","LazyMapsAPILoaderConfig","LazyMapsAPILoaderConfig.constructor","LazyMapsAPILoader","LazyMapsAPILoader.constructor","LazyMapsAPILoader.load","LazyMapsAPILoader._getScriptSrc"],"mappings":"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","file":"services/maps-api-loader/lazy-maps-api-loader.js","sourcesContent":["import {Injectable, Optional} from 'angular2/core';\nimport {MapsAPILoader} from './maps-api-loader';\n\nexport enum GoogleMapsScriptProtocol {\n  HTTP,\n  HTTPS,\n  AUTO\n}\n\nexport class LazyMapsAPILoaderConfig {\n  apiKey: string = null;\n  apiVersion: string = '3';\n  hostAndPath: string = 'maps.googleapis.com/maps/api/js';\n  protocol: GoogleMapsScriptProtocol = GoogleMapsScriptProtocol.HTTPS;\n}\n\nconst DEFAULT_CONFIGURATION = new LazyMapsAPILoaderConfig();\n\n@Injectable()\nexport class LazyMapsAPILoader extends MapsAPILoader {\n  private _scriptLoadingPromise: Promise<void>;\n\n  constructor(@Optional() private _config: LazyMapsAPILoaderConfig) {\n    super();\n    if (this._config === null || this._config === undefined) {\n      this._config = DEFAULT_CONFIGURATION;\n    }\n  }\n\n  load(): Promise<void> {\n    if (this._scriptLoadingPromise) {\n      return this._scriptLoadingPromise;\n    }\n\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.async = true;\n    script.defer = true;\n    const callbackName: string = `angular2googlemaps${new Date().getMilliseconds()}`;\n    script.src = this._getScriptSrc(callbackName);\n\n    this._scriptLoadingPromise = new Promise<void>((resolve: Function, reject: Function) => {\n      (<any>window)[callbackName] = () => { resolve(); };\n\n      script.onerror = (error: Event) => { reject(error); };\n    });\n\n    document.body.appendChild(script);\n    return this._scriptLoadingPromise;\n  }\n\n  private _getScriptSrc(callbackName: string): string {\n    let protocolType: GoogleMapsScriptProtocol =\n        (this._config && this._config.protocol) || DEFAULT_CONFIGURATION.protocol;\n    let protocol: string;\n\n    switch (protocolType) {\n      case GoogleMapsScriptProtocol.AUTO:\n        protocol = '';\n        break;\n      case GoogleMapsScriptProtocol.HTTP:\n        protocol = 'http:';\n        break;\n      case GoogleMapsScriptProtocol.HTTPS:\n        protocol = 'https:';\n        break;\n    }\n\n    const hostAndPath: string = this._config.hostAndPath || DEFAULT_CONFIGURATION.hostAndPath;\n    const apiKey: string = this._config.apiKey || DEFAULT_CONFIGURATION.apiKey;\n    const queryParams: {[key: string]: string} = {\n      v: this._config.apiVersion || DEFAULT_CONFIGURATION.apiKey,\n      callback: callbackName\n    };\n    if (apiKey) {\n      queryParams['key'] = apiKey;\n    }\n    const params: string = Object.keys(queryParams)\n                               .map((k: string, i: number) => {\n                                 let param = (i === 0) ? '?' : '&';\n                                 return param += `${k}=${queryParams[k]}`;\n                               })\n                               .join('');\n    return `${protocol}//${hostAndPath}${params}`;\n  }\n}\n"],"sourceRoot":"/source/"}